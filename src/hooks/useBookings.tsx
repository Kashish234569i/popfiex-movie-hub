import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from './useAuth';

export interface Booking {
  id: string;
  user_id: string;
  showtime_id: string;
  seat_ids: string[];
  total_amount: number;
  booking_status: string;
  booking_reference: string;
  created_at: string;
  showtimes?: {
    show_date: string;
    show_time: string;
    format: string;
    movies: {
      title: string;
      poster_url: string;
    };
    theaters: {
      name: string;
      address: string;
    };
  };
}

export function useBookings() {
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { user } = useAuth();

  useEffect(() => {
    if (user) {
      fetchBookings();
    }
  }, [user]);

  const fetchBookings = async () => {
    if (!user) return;

    try {
      const { data, error } = await supabase
        .from('bookings')
        .select(`
          *,
          showtimes:showtime_id (
            show_date,
            show_time,
            format,
            movies:movie_id (title, poster_url),
            theaters:theater_id (name, address)
          )
        `)
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setBookings(data || []);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch bookings');
    } finally {
      setLoading(false);
    }
  };

  const createBooking = async (showtimeId: string, seatIds: string[], totalAmount: number) => {
    if (!user) throw new Error('User must be logged in to create a booking');

    try {
      const { data, error } = await supabase
        .from('bookings')
        .insert({
          user_id: user.id,
          showtime_id: showtimeId,
          seat_ids: seatIds,
          total_amount: totalAmount,
          booking_reference: '', // Will be auto-generated by trigger
        })
        .select()
        .single();

      if (error) throw error;
      await fetchBookings();
      return { data, error: null };
    } catch (err) {
      return { data: null, error: err instanceof Error ? err.message : 'Failed to create booking' };
    }
  };

  const cancelBooking = async (bookingId: string) => {
    if (!user) throw new Error('User must be logged in to cancel a booking');

    try {
      const { data, error } = await supabase
        .from('bookings')
        .update({ booking_status: 'cancelled' })
        .eq('id', bookingId)
        .eq('user_id', user.id)
        .select()
        .single();

      if (error) throw error;
      await fetchBookings();
      return { data, error: null };
    } catch (err) {
      return { data: null, error: err instanceof Error ? err.message : 'Failed to cancel booking' };
    }
  };

  return { 
    bookings, 
    loading, 
    error, 
    refetch: fetchBookings,
    createBooking,
    cancelBooking
  };
}